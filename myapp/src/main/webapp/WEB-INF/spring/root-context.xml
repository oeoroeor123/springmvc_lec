<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

 <!--
  Spring Bean Configuration File (SpringContainer에 Bean을 만들어두는 파일) 
  관계성 : 1번 만들어서 DI 의존성 주입으로 2번에 저장하는 관계 > 순차적 진행
  -->
  
  <!-- 1. com.zaxxer.hikari.HikariConfig (setter 메소드(property) 이용해 객체 주입), 접속을 위한 기본 정보 저장 객체 -->
  <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/db_myapp?serverTimezone=Asia/Seoul"/>
    <property name="username" value="greenit"/>
    <property name="password" value="greenit"/>
  </bean>

  <!-- 2. com.zaxxer.hikari.HikariDataSource (constructor 생성자 이용해 객체 주입) 접속 실행을 위한 DataSource 객체 -->
  <bean id="hikariDataSource" class="com.zaxxer.hikari.HikariDataSource">
    <constructor-arg ref="hikariConfig"/>
  </bean>
  
  <!-- 3. org.mybatis.spring.SqlSessionFactoryBean (SQL문 실행을 위해 DataSource를 참조하여 MyBatis와 Mysql 서버를 연동하는 객체)-->
  <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="hikariDataSource"/>
    <property name="configLocation" value="classpath:mybatis/configuration/mybatis-config.xml"/> <!-- 마이바티스 환경 설정 파일 위치 등록 -->
    <property name="mapperLocations" value="classpath:mybatis/mappers/*.xml"/> <!-- 매퍼 파일 위치 등록, 매퍼는 여러개 존재할 수 있기에 lacations로 작성 -->
  </bean>
  
  <!-- 4. org.mybatis.spring.SqlSessionTemplate (매퍼의 SQL문을 실행하는 Java 객체) -->
  <bean id="SqlSessiontemplate" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg ref="sqlSessionFactoryBean"/>
  </bean>
  
  <!-- AOP를 이용한 트랜잭션 처리하기 (DataSource가 필요하기 때문에 root-context.xml에서 진행한다.) -->
  <!-- 1. DataSourceTransactionManager -->
  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
    <property name="dataSource" ref="hikariDataSource"/>  
  </bean>
  
  <!-- 2. txManager를 Advice로 등록하기 -->
  <tx:advice id="txAdvice" transaction-manager="txManager">
    <tx:attributes>
    <!-- 트랜젝션은 select 메소드에서 동작하지 않는다. -->
      <tx:method name="*"/>
    <!-- get으로 시작하는 메소드는 모두 read-only : 읽기 전용 (트랜젝션이 필요 없다는 것을 의미_제외 처리) -->
      <tx:method name="get*" read-only="true"/>
    </tx:attributes>
  </tx:advice>
  
  <!-- 3. Advice가 동작할 PointCut 등록하기 (execution의 xml 버전) -->
  <aop:config>
    <aop:pointcut expression="execution(* com.min.app11.service.*Impl.*(..))" id="txPointCut"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
  </aop:config>
  
  <!-- 4. AOP 동작 확인하기 (AppConfig에서 @EnableAspectJAutoProxy를 주석 처리했기 때문에 사용 -->
<aop:aspectj-autoproxy/>
</beans>
