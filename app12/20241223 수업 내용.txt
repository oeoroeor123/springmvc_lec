*20241223 수업 내용

[ LOGBACK ]

1. log4j 프로젝트의 후속 프로젝트
2. 속도, 성능 등에서 많은 개선이 이루어짐
3. logback-core, logback-classic, logback-access 모듈로 구성
4. logback-classic은 SLF4J API를 구현
5. User - SLF4J(인터페이스) - Log4j
                                   - Logback
                                   - Java API Log ... (구현체들)

6. logback-classic, slf4j-api 디펜던시를 사용
7. 환경 설정 (LOGBACK Configuration)
1) 클래스 패스(src/main/resources)에 logback-test.xml 또는 logback.xml 파일을 두는데, 우선 순위를 가진다.
(아래 파일들을 순차적으로 읽어보고, 없으면 다음꺼를 읽는다. 이 중 하나만 만들면 됌)
① logback.groovy
② logback.test.xml
③ logback.xml (수업에서 사용할 파일 이름)

2) logback.xml 파일은 <configuration> 태그로 구성된다.


8. 로그 남기기 (Appender)
1) 로깅 이벤트 작성을 수행
2) 종류
OutputStreamAppender : 출력 스트림 어펜더
consoleAppender : 콘솔 어펜더
FileAppender : 파일 어펜더 (싱글 로그 파일)
RollingFileAppender : 롤링 파일 어펜더 (로그 파일 롤오버한다. = 여러개를 만든다.)


9. 패턴 레이아웃
1) 주요 패턴
① %logger{length} : 로거, 로그를 찍는 클래스
② %date{pattern} : 로그 기록 날짜와 시간 (back 1.3은 java.time.format.DateTimeFormatter의 pattern을 그대로 사용한다.) ex)yyyy-MM-dd
③ %level : 로그 레벨 (로그를 언제 남길것인가_ logback의 경우, OFF/ERROR/WARN/INFO/DEBUG/TRACE_뒤로 갈수록 설명이 자세함)
            앞에 숫자를 넣어 최대 자리수를 맞춰 레벨을 지정하고, -을 넣어 왼쪽 정렬을 해줌 (공백처리)
④ %thread : 로깅 이벤트가 발생한 스레드 (작업 분기, 대표적으로 main 스레드가 존재함)
⑤ %msg : 로그 메시지 (실제로 출력되는 로그 내용)
⑥ %n : 줄 바꿈(Line Seperator)

2) 색상 지정 (18개 색상)
%black, %red, %green, %blue, ...와 같은 %highlight (색상을 알아서 지정해줌)
ex_%highlight(%level) : 로그 레벨을 종류별로 다른 색상으로 지정


10. 로그 레벨
1) 로깅 이벤트가 언제 발생하는지를 의미
2) logback의 Log Level 종류
① OFF : 로그 안남김
② ERROR : 요청 처리 중 문제가 발생하는 경우 로그를 남김
③ WARN : error 상황과 warning 상황에서 로그를 남김
          warning 상황 : 요청 처리가 가능하지만, 향후 시스템 에러의 원인이 될 수 있는 경우 경고성 메시지를 로그로 남김
④ INFO : error, warning, info 상황에서 로그를 남김
          info 상황 : 애플리케이션이 동작하는 일반적인 상황에서 로그를 남김 (로그인, 상태 변경 등), 운영 시 많이 사용하는 레벨
⑤ DEBUG : error, warning, info, debug 상황에서 로그를 남김
           debug 상황 : 애플리케이션이 동작하는 구체적인 상황에서 로그를 남김 (db 출처 등), 디버그 메시지를 남기기 때문에 개발 시 많이 사용하는 레벨 
⑥ TRACE : error, warning, info, debug, trace 상황에서 로그를 남김
           trace 상황 : 아주 자세한 디버그 메시지를 확인 할수 있음
